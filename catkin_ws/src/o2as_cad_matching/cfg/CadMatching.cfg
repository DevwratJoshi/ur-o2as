#!/usr/bin/env python
PACKAGE = "o2as_cad_matching"

from math import pi
from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

object_id = gen.enum([
    gen.const("01_BASE"                     , int_t,  1, "Base Panel"),
    gen.const("02_PANEL"                    , int_t,  2, "Output shaft fixing plate"),
    gen.const("03_PANEL2"                   , int_t,  3, "Motor fixing plate"),
    gen.const("04_37D_GEARMOTOR_50_70"      , int_t,  4, "Geared motor (Gear ratio 1:70)"),
    gen.const("05_MBRFA30_2_P6"             , int_t,  5, "Pulley for Round Belt (4mm) - Setscrew P.D. 30mm"),
    gen.const("06_MBT4_400"                 , int_t,  6, "Polyurethane round belt (welded joint product) P.D. 4mm L=400mm"),
    gen.const("07_SBARB6200ZZ_30"           , int_t,  7, "Bearings with Housings (Double Bearings)"),
    gen.const("08_KZAF1075NA4WA55GA20AA0"   , int_t,  8, "Drive shaft (Straight) D10h6"),
    gen.const("09_EDCS10"                   , int_t,  9, "End Cap for Shaft"),
    gen.const("10_CLBPS10_17_4"             , int_t, 10, "Bearing Spacers For Inner Ring (output pulley)"),
    gen.const("11_MBRAC60_2_10"             , int_t, 11, "Pulley for Round Belts Clamping Type P.D. 60mm"),
    gen.const("12_CLBUS6_9_9_5"             , int_t, 12, "Bearing Spacers For Inner Ring (tension pulley)"),
    gen.const("13_MBGA30_2"                 , int_t, 13, "Idler for Round Belt - Wide"),
    gen.const("14_BGPSL6_9_L30_F8"          , int_t, 14, "Bearing Shaft Screw"),
    gen.const("15_SLBNR6"                   , int_t, 15, "M6 Hex Nut (Fixing for idler shaft)"),
    gen.const("16_SPWF6"                    , int_t, 16, "M6 Flat Washer (Fixing for idler shaft)"),
    gen.const("17_SCB4_10"                  , int_t, 17, "10mm M4 Socket Head Cap Screw (metric coarse thread)"),
    gen.const("100_robotiq_calib_marker"    , int_t, 100, "Aruco calibration board for robotiq gripper"),
    gen.const("102_CalTarget15"             , int_t, 102, "3D calibration target")],
    "An enum to set object id")

# camera = gen.enum([
#     gen.const("phoxi"                     , int_t,  1, "PhoXi camera."),
#     gen.const("b_bot_camera"              , int_t,  2, "RealSense camera attached on the b_bot.")],
#     "An enum to set camera name")

gen.add("object_id"   , int_t , 1 << 0, "id of the object to be detected."              , 7, 1, 1000, edit_method=object_id)
# gen.add("camera"      , int_t , 1 << 0, "id of the camera to be used to detect object." , 1, 1,  2, edit_method=camera)

exit(gen.generate(PACKAGE, "o2as_cad_matching", "CadMatching"))
