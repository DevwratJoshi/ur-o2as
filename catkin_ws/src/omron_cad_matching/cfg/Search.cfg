#!/usr/bin/env python
PACKAGE = "omron_cad_matching"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

image_enum = gen.enum(
    [gen.const("None",  int_t, 0, "Not use image"),
     gen.const("Mono",  int_t, 1, "Use mono image"),
     gen.const("Color", int_t, 3, "Use color image")],
    "An enum to set image usage")

gen.add("width"              , int_t,    1 <<  0, "image width"                                ,    1,    0,  3000)
gen.add("height"             , int_t,    1 <<  1, "image height"                               ,    1,    0,  3000)
gen.add("search_color_num"   , int_t,    1 <<  2, "search color num"                           ,    0,    0,     3, edit_method=image_enum)
gen.add("icp_color_num"      , int_t,    1 <<  3, "icp color num"                              ,    1,    0,     3, edit_method=image_enum)
gen.add("thresh_depth"       , double_t, 1 <<  4, "threshold of depth gradient calculation"    ,   -1,   -1,  1000)
gen.add("thresh_grad"        , int_t,    1 <<  5, "threshold of image gradiend calculation"    ,   -1,   -1,  1000)
gen.add("thresh_inlier_pc"   , int_t,    1 <<  6, "threshold of outlier judgement of pcloud"   ,   30,    0,   359)
gen.add("search_area_left"   , int_t,    1 <<  7, "left of search area"                        ,    0,    0,  3000)
gen.add("search_area_top"    , int_t,    1 <<  8, "top of search area"                         ,    0,    0,  3000)
gen.add("search_area_right"  , int_t,    1 <<  9, "right of search area"                       ,    1,    1,  3000)
gen.add("search_area_bottom" , int_t,    1 << 10, "bottom of search area"                      ,    1,    1,  3000)
gen.add("max_result_num_all" , int_t,    1 << 11, "maximum number of total results"            ,   15,    1,   100)
gen.add("thread_num"         , int_t,    1 << 12, "number of the threads to be used to search" ,    1,    1,    32)
gen.add("min_lat"            , int_t,    1 << 13, "minimum angle of latitude [deg]"            ,  -90,  -90,    90)
gen.add("max_lat"            , int_t,    1 << 14, "maximum angle of latitude [deg]"            ,   90,  -90,    90)
gen.add("min_lon"            , int_t,    1 << 15, "minimum angle of longitude [deg]"           ,  -90,  -90,    90)
gen.add("max_lon"            , int_t,    1 << 16, "maximum angle of longitude [deg]"           ,   90,  -90,    90)
gen.add("min_roll"           , int_t,    1 << 17, "minimum angle of roll [deg]"                , -180, -180,   180)
gen.add("max_roll"           , int_t,    1 << 18, "maximum angle of roll [deg]"                ,  180, -180,   180)
gen.add("min_dist"           , int_t,    1 << 19, "minimum distance from the sensor in [mm]"   ,  100,    1,  2000)
gen.add("max_dist"           , int_t,    1 << 20, "maximum distance from the sensor in [mm]"   , 1000,    1,  2000)
gen.add("thresh_search"      , int_t,    1 << 21, "threshold of search"                        ,   45,    1,    99)
gen.add("search_coef"        , double_t, 1 << 22, "coefficient of search"                      ,  0.1,  1.0,  10.0)
gen.add("max_result_num"     , int_t,    1 << 23, "maximum number of object search results"    ,   15,    1,   100)
gen.add("display"            , bool_t,   1 << 24, "display search result image on the window"  ,  True)

exit(gen.generate(PACKAGE, "omron_cad_matching", "Search"))
